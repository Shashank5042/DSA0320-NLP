import nltk
from nltk.stem import PorterStemmer, WordNetLemmatizer
from nltk.corpus import wordnet

# Ensure required resources are downloaded
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
# Download the 'punkt_tab' resource for tokenization
nltk.download('punkt_tab') # This line was added to download the resource

def get_wordnet_pos(treebank_tag):
    """Converts POS tags from Treebank format to WordNet format for lemmatization."""
    if treebank_tag.startswith('J'):
        return wordnet.ADJ
    elif treebank_tag.startswith('V'):
        return wordnet.VERB
    elif treebank_tag.startswith('N'):
        return wordnet.NOUN
    elif treebank_tag.startswith('R'):
        return wordnet.ADV
    else:
        return wordnet.NOUN  # Default to noun

def morphological_analysis(text):
    # Tokenization
    tokens = nltk.word_tokenize(text)

    # Part-of-speech tagging
    pos_tags = nltk.pos_tag(tokens)

    # Stemming using Porter Stemmer
    stemmer = PorterStemmer()
    stems = [stemmer.stem(token) for token in tokens]

    # Lemmatization using WordNet Lemmatizer
    lemmatizer = WordNetLemmatizer()
    lemmas = [lemmatizer.lemmatize(token, get_wordnet_pos(pos)) for token, pos in pos_tags]

    # Display results
    print(f"{'Word':<15}{'Stem':<15}{'Lemma':<15}{'POS Tag'}")
    print("-" * 50)
    for token, stem, lemma, pos in zip(tokens, stems, lemmas, pos_tags):
        print(f"{token:<15}{stem:<15}{lemma:<15}{pos[1]}")

if __name__ == "__main__":
    text = "The leaves are falling from the trees, and the children are happily running."
    morphological_analysis(text)
